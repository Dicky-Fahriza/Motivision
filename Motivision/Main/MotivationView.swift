//
//  MotivationView.swift
//  Motivision
//
//  Created by MacBook Pro on 02/05/24.
//

import SwiftUI

struct MotivationView: View {
    @StateObject private var motivationVM = MotivationVM()
    
    @State private var selectedGoals: Goals = .bekerja
    @State private var selectedMotivator: Motivator = .indonesia
    
//    var place: Place
//    @State private var todayStory: String = ""
   
    var body: some View {
        NavigationStack {
            Form {
                // MARK: - PICKER VIEW
                Section {
                    Picker(selection: $selectedGoals) {
                        ForEach(Goals.allCases, id: \.self) {
                            goals in
                            Text(goals.rawValue.capitalized)
                                .font(.subheadline)
                                .tag(goals)
                                
                        }
                    } label: {
                        Text("Choose Goals")
                            .foregroundStyle(.gray)
                    }
                    
                    Picker(selection: $selectedMotivator) {
                        ForEach(Motivator.allCases, id: \.self) {
                            motivator in
                            Text(motivator.rawValue.capitalized)
                                .font(.subheadline)
                                .tag(motivator)
                                
                        }
                    } label: {
                        Text("Choose Motivator")
                            .foregroundStyle(.gray)
                    }
                
                } header: {
                    Text("MOTIVATION")
                        .foregroundStyle(.accent)
                    
                } footer: {
                    Text("Choose any goals and motivator that you want.")
                        .foregroundStyle(.accent)
                }
                
                // MARK: - TEXT EDITOR
                
//                VStack(alignment: .leading, spacing: 16) {
//                    Text(place.author)
//                    .font(.system(.title3, design: .rounded))}
//                
                Section {
                    TextEditor(text: $motivationVM.displayedStoryText)
                        .frame(height: 200)
                        .font(.system(.headline, design: .rounded))
                        .foregroundStyle(.primary)
                        .disabled(motivationVM.isLoading)
                        .overlay {
                            motivationVM.isLoading ? ProgressView() : nil
                        }
//                    Text("place.author")
                        
                }
        
            header: {
                    Text("Todays Motivation")
                        .foregroundStyle(.accent)
                } footer: {
                     Text("This motivations are being generated by Gemini AI.")
                        .foregroundStyle(.accent)
                }
            
                Button {
                    if motivationVM.displayedStoryText.isEmpty {
                        generateStory()
                    } else {
                        motivationVM.displayedStoryText = "" // Mengosongkan teks motivasi yang ditampilkan
                        generateStory() // Memuat motivasi baru
                    }
                } label: {
                    Text(motivationVM.displayedStoryText.isEmpty ? "Generate" : "Generate Again")
                        .font(.system(.callout, design: .rounded))
                        .fontWeight(.bold)
                }
                .buttonStyle(PlainButtonStyle())
                
                .frame(minWidth: 0, maxWidth: .infinity)
                
            }
            
            
            .navigationTitle("Motivation")
            .navigationBarTitleDisplayMode(.inline)
            .tint(.primary)
        }
    }
}

#Preview {
    MotivationView()
//    MotivationView(place: Place.dummmyData[0])
 
}

// MARK: - PLAY SPEECH
extension MotivationView {
    
    func generateStory() {
        Task{
            await motivationVM.generateStory(goals: selectedGoals, motivator: selectedMotivator)
        }
    }
    
    private func motivationStory() {
        if motivationVM.displayedStoryText.isEmpty {
            generateStory()
        }
    }
}
